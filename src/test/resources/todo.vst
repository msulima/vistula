'''# javascript
let submitTasks = new vistula.ObservableImpl();

function capitalize(Title) {
  return Title.rxMap(function (title) {
    return title.toLocaleUpperCase();
  });
}

function capitalizeTitle(Todo) {
  return Todo.rxFlatMap(function (todo) {
      return vistula.constantObservable({
        "completed": vistula.constantObservable(true),
        "title": capitalize(todo.title)
      })
  });
}

'''

sample = {
  "title": "Finish TodoMVC",
  "completed": false,
  "editing": false
}

todos = ([sample] or arrayPush(todos, {
  "title": submitTasks.title,
  "completed": false,
  "editing": false
}) for todos in submitTasks)

app = '''# html:/todo.vst.html'''

def classForIsCompleted(todo):
  if todo.completed:
    "completed"
  else:
    "view"

def classForIsEditing(todo):
  if todo.editing:
    "editing"
  else:
    ""

stdlib.dom.appendChild("todoapp", app)

completed = for todo in todos:
  todo.completed

'''# javascript
function editTodo(Todo) {
  Todo.rxForEach((todo, unsubscribe) => {
    unsubscribe();
    todo.editing.rxPush(true);
  });
};

function finishEditingTodo(Todo) {
  console.log("wtf");
  Todo.rxForEach((todo, unsubscribe) => {
    unsubscribe();
    todo.editing.rxPush(false);
  });
};

let AllCompleted = completed.rxMap(completed => {
    return !completed.every(x => x);
});

document.getElementById("completeAll").addEventListener("click", function (ev) {
  AllCompleted.rxForEach((allCompleted, unsubscribe) => {
    unsubscribe();
    todos.rxForEach((todos, unsubscribe) => {
      unsubscribe();
      todos.forEach((Todo, unsubscribe) => {
        Todo.rxForEach((todo, unsubscribe) => {
          unsubscribe();
          console.log(allCompleted);
          todo.completed.rxPush(allCompleted);
        });
      });
    });
  });
});

document.getElementById("task").addEventListener("submit", function (ev) {
  ev.preventDefault();
  let elements = ev.srcElement.elements;
  let formValue = {};
  Object.keys(elements).forEach(function (key) {
    formValue[elements[key].name] = vistula.toObservable(elements[key].value);
  });
  Object.keys(elements).forEach(function (key) {
    elements[key].value = "";
  });

  submitTasks.rxPush(formValue);
});
'''
