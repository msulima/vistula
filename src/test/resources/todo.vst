'''# javascript
const submitTasks = new vistula.ObservableImpl();

function addTask(ev) {
  ev.preventDefault();
  let elements = ev.srcElement.elements;
  let formValue = {};
  Object.keys(elements).forEach(function (key) {
    formValue[elements[key].name] = vistula.toObservable(elements[key].value);
  });
  Object.keys(elements).forEach(function (key) {
    elements[key].value = "";
  });

  submitTasks.rxPush({
    "isAdd": vistula.constantObservable(true),
    "form": vistula.constantObservable(formValue)
  });
};
'''

def currentFilter(hash):
  if hash == "/active":
    "active"
  elif hash == "/completed":
    "completed"
  else:
    "all"

let filter = currentFilter(stdlib.location.hash)

def updateTodos(allTodos, action):
  if action.isAdd:
    stdlib.arrayPush(allTodos, {
      "title": action.form.title,
      "completed": False,
      "editing": False
    })
  else:
    stdlib.arrayDiff(allTodos, action.todos)

let storageName = "todos-vistula"

let allTodos = (stdlib.storage.getOrDefault(storageName, []) or updateTodos(allTodos, submitTasks) for allTodos in submitTasks)

let bar = stdlib.storage.set(storageName, allTodos)

def isVisible(todo):
  if filter == "all":
    True
  elif filter == "completed":
    todo.completed
  else:
    not todo.completed

let todos = stdlib.arrayFilter(allTodos, lambda todo: isVisible(todo))

def classForIsCompleted(todo):
  if todo.completed:
    "completed"
  else:
    "view"

def classForIsEditing(todo):
  if todo.editing:
    "editing"
  else:
    ""

def classForFilter(label):
  if filter == label:
    "selected"
  else:
    ""

let completed = stdlib.arrayFilter(allTodos, lambda todo: todo.completed)

def clearCompleted():
  submitTasks = {
    "isAdd": False,
    "todos": completed
  }

def removeTodo(todo):
  submitTasks = {
    "isAdd": False,
    "todos": [todo]
  }

def editTodo(todo, formField):
  todo.editing = True
  const x = formField
  x.focus()

def finishEditingTodo(todo):
  todo.editing = False

let leftTodosCount = stdlib.arraySize(allTodos) - stdlib.arraySize(completed)

let app = '''# html:/todo.vst.html'''

let foo = stdlib.dom.appendChild("todoapp", app)

'''# javascript

foo.rxForEach(() => {});
bar.rxForEach(() => {});

function toggleAll() {
  leftTodosCount.rxForEachOnce(leftTodosCount => {
    todos.rxForEachOnce(todos => {
      todos.forEach(Todo => {
        Todo.rxForEachOnce(todo => {
          todo.completed.rxPush(leftTodosCount != 0);
        });
      });
    });
  });
};
'''
