import js.Event
import stdlib.ui.Form
import stdlib.ui.Dom
import stdlib.storage.LocalStorage
import stdlib.location.Location

'''# javascript
const submitTasks = new vistula.ObservableImpl();
'''

class Todo {
  def __init__(title: *vistula.lang.String, completed: *vistula.lang.Boolean, editing: *vistula.lang.Boolean) {
    pass
  }
}

class SubmittedTask {
  def __init__(isAdd: vistula.lang.Boolean, form: *vistula.lang.Object, todos: *vistula.lang.Seq) {
    pass
  }
}

def addTask(ev: js.Event) {
  ev.preventDefault()

  submitTasks <- SubmittedTask(True, stdlib.ui.formValueFromEvent(ev), None)
}

def currentFilter(hash) {
  if (hash == "/active") {
    "active"
  } elif (hash == "/completed") {
    "completed"
  } else {
    "all"
  }
}

let filter = currentFilter(stdlib.location.hash())

def updateTodos(allTodos, action: *SubmittedTask) {
  if (action.isAdd) {
    allTodos.append(Todo(action.form.title, False, False))
  } else {
    allTodos.diff(action.todos)
  }
}

let storageName = "todos-vistula"

let allTodos: vistula.collection.Seq = (stdlib.storage.getOrDefault(storageName, vistula.Seq.apply()) or updateTodos(allTodos, submitTasks) for allTodos in submitTasks)

let bar = stdlib.storage.set(storageName, allTodos)

def isVisible(todo) {
  if (filter == "all") {
    True
  } elif (filter == "completed") {
    todo.completed
  } else {
    not todo.completed
  }
}

let todos = allTodos.filter(isVisible)

def classForFilter(label) {
  if (filter == label) {
    "selected"
  } else {
    ""
  }
}

let completed = allTodos.filter(lambda todo -> todo.completed)

def clearCompleted() {
  submitTasks <- SubmittedTask(False, None, completed)
}

def removeTodo(todo) {
  submitTasks <- SubmittedTask(False, None, vistula.Seq.apply(todo))
}

def editTodo(todo, formField) {
  todo.editing <- True
  pass
  (*formField).focus()
}

def finishEditingTodo(todo) {
  todo.editing <- False
}

let leftTodosCount = allTodos.size() - completed.size()

let app = '''# html:/todo.vst.html'''

let foo = stdlib.ui.appendChild("todoapp", app)

def toggleAll() {
  const x = leftTodosCount

  let y = for (todo in todos) {
    todo.completed <- x != 0
  }

  pass
  *y
}

'''# javascript

foo.rxForEach(() => {});
bar.rxForEach(() => {});

'''
