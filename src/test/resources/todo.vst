'''# javascript
const submitTasks = new vistula.ObservableImpl();

function capitalize(Title) {
  return Title.rxMap(function (title) {
    return title.toLocaleUpperCase();
  });
}

'''

def capitalizeTitle(todo):
  {
    "completed": True,
    "title": capitalize(todo.title)
  }

def currentFilter(hash):
  if hash == "/active":
    "active"
  elif hash == "/completed":
    "completed"
  else:
    "all"

filter = currentFilter(stdlib.location.hash)

sample = {
  "title": "Finish TodoMVC",
  "completed": False,
  "editing": False
}

completedSample = {
  "title": "Hop hop",
  "completed": True,
  "editing": False
}

def updateTodos(allTodos, action):
  if action.isAdd:
    stdlib.arrayPush(allTodos, {
      "title": action.form.title,
      "completed": False,
      "editing": False
    })
  else:
    stdlib.arrayDiff(allTodos, action.todos)

allTodos = (stdlib.storage.getOrDefault("todos", []) or updateTodos(allTodos, submitTasks) for allTodos in submitTasks)

bar = stdlib.storage.set("todos", allTodos)

def isVisible(todo):
  if filter == "all":
    True
  elif filter == "completed":
    todo.completed
  else:
    not todo.completed

todos = stdlib.arrayFilter(allTodos, lambda todo: isVisible(todo))

def classForIsCompleted(todo):
  if todo.completed:
    "completed"
  else:
    "view"

def classForIsEditing(todo):
  if todo.editing:
    "editing"
  else:
    ""

def classForFilter(label):
  if filter == label:
    "selected"
  else:
    ""

completed = stdlib.arrayFilter(allTodos, lambda todo: todo.completed)

'''# javascript
function editTodo(ev, Todo, EditedTodo) {
  vistula.zip([Todo, EditedTodo]).rxForEachOnce($args => {
    $args[0].editing.rxPush(true);
    $args[1].focus();
  });
};

function removeTodo(Todo) {
  submitTasks.rxPush({
    "isAdd": vistula.constantObservable(false),
    "todos": vistula.constantObservable([Todo])
  });
};

function clearCompleted() {
  completed.rxForEachOnce(completed => { // FIXME
    submitTasks.rxPush({
      "isAdd": vistula.constantObservable(false),
      "todos": vistula.constantObservable(completed)
    });
  });
};

function finishEditingTodo(Todo) {
  Todo.rxForEachOnce(todo => {
    todo.editing.rxPush(false);
  });
};

'''

leftTodosCount = stdlib.arraySize(allTodos) - stdlib.arraySize(completed)

app = '''# html:/todo.vst.html'''

foo = stdlib.dom.appendChild("todoapp", app)

'''# javascript

foo.rxForEach(() => {});
bar.rxForEach(x => console.log());

function toggleAll() {
  leftTodosCount.rxForEachOnce(leftTodosCount => {
    todos.rxForEachOnce(todos => {
      todos.forEach(Todo => {
        Todo.rxForEachOnce(todo => {
          todo.completed.rxPush(leftTodosCount != 0);
        });
      });
    });
  });
};

function addTask(ev) {
  ev.preventDefault();
  let elements = ev.srcElement.elements;
  let formValue = {};
  Object.keys(elements).forEach(function (key) {
    formValue[elements[key].name] = vistula.toObservable(elements[key].value);
  });
  Object.keys(elements).forEach(function (key) {
    elements[key].value = "";
  });

  submitTasks.rxPush({
    "isAdd": vistula.constantObservable(true),
    "form": vistula.constantObservable(formValue)
  });
};
'''
