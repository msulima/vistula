'''# javascript
let submitTasks = new vistula.ObservableImpl();
let clickedFilter = new vistula.ObservableImpl();

function capitalize(Title) {
  return Title.rxMap(function (title) {
    return title.toLocaleUpperCase();
  });
}

function capitalizeTitle(Todo) {
  return Todo.rxFlatMap(function (todo) {
      return vistula.constantObservable({
        "completed": vistula.constantObservable(true),
        "title": capitalize(todo.title)
      })
  });
}

function setFilter(Filter) {
  Filter.rxForEach(($arg, unsubscribe) => {
    unsubscribe();
    clickedFilter.rxPush($arg);
  });
}

'''

filter = ("all" or clickedFilter for filter in clickedFilter)

sample = {
  "title": "Finish TodoMVC",
  "completed": False,
  "editing": False
}

completedSample = {
  "title": "Hop hop",
  "completed": True,
  "editing": False
}

allTodos = ([sample, completedSample] or arrayPush(allTodos, {
  "title": submitTasks.title,
  "completed": False,
  "editing": False
}) for allTodos in submitTasks)

def isVisible(todo):
  if filter == "all":
    True
  elif filter == "completed":
    todo.completed
  else:
    not todo.completed

todos = arrayFilter(allTodos, lambda todo: isVisible(todo))

def classForIsCompleted(todo):
  if todo.completed:
    "completed"
  else:
    "view"

def classForIsEditing(todo):
  if todo.editing:
    "editing"
  else:
    ""

def classForFilter(label):
  if filter == label:
    "selected"
  else:
    ""

completed = arrayFilter(allTodos, lambda todo: todo.completed)

'''# javascript
function editTodo(ev, Todo, EditedTodo) {
  vistula.zip([Todo, EditedTodo]).rxForEach(($args, unsubscribe) => {
    unsubscribe();
    $args[0].editing.rxPush(true);
    $args[1].focus();
  });
};

function finishEditingTodo(Todo) {
  Todo.rxForEach((todo, unsubscribe) => {
    unsubscribe();
    todo.editing.rxPush(false);
  });
};

'''

leftTodosCount = arraySize(allTodos) - arraySize(completed)

app = '''# html:/todo.vst.html'''

stdlib.dom.appendChild("todoapp", app)

'''# javascript
filter.rxForEach(x => console.log(x));
todos.rxFlatMap(xs => vistula.zip(xs.map(x => x.rxFlatMap(y => y.title)))).rxForEach(x => console.log(x));

document.getElementById("completeAll").addEventListener("click", function (ev) {
  leftTodosCount.rxForEach((leftTodosCount, unsubscribe) => {
    unsubscribe();
    todos.rxForEach((todos, unsubscribe) => {
      unsubscribe();
      todos.forEach((Todo, unsubscribe) => {
        Todo.rxForEach((todo, unsubscribe) => {
          unsubscribe();
          todo.completed.rxPush(leftTodosCount != 0);
        });
      });
    });
  });
});

document.getElementById("task").addEventListener("submit", function (ev) {
  ev.preventDefault();
  let elements = ev.srcElement.elements;
  let formValue = {};
  Object.keys(elements).forEach(function (key) {
    formValue[elements[key].name] = vistula.toObservable(elements[key].value);
  });
  Object.keys(elements).forEach(function (key) {
    elements[key].value = "";
  });

  submitTasks.rxPush(formValue);
});
'''
